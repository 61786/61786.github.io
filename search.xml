<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo搭建博客</title>
    <url>/uncategorized/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>之前上班由于比较忙，没时间将项目用过的东西记录下来等过段时间再用时发现大部分忘记了，看同事大部分都使用hexo博客来记录，话不多说直接搞起：</p>
<h4 id="技术选型：Git-Github-Markdown-hexo"><a href="#技术选型：Git-Github-Markdown-hexo" class="headerlink" title="技术选型：Git+Github+Markdown+hexo"></a>技术选型：Git+Github+Markdown+hexo</h4><p>   1.搭建准备工作： git下载安装及GitHub账号绑定 </p>
<p>   2.安装node.js 需要修改npm路径path</p>
<ol>
<li><p>安装hexo  验证是否成功  hexo server 如果hexo命令无法使用 将model下.bin路径加入path变量中  </p>
</li>
<li><p>创建github repositroy远程仓库 这里花了较多时间</p>
</li>
<li><p>部署本地文件到github </p>
</li>
<li><p>购买域名及配置SSH密钥等 设置SSH密钥后需要验证是否可用，配置DNS等</p>
</li>
</ol>
<p>至此 博客已经搭建完毕 本地访问4000端口可预览！搭建好之后有没有原主题很low，我们可以去 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">博客主题网站</a>  来选择自己喜欢的主题样式down下来修改 _config.yml文件主题配置名即可  。     修改主题命令为（git bash下）hexo generate –deploy   hexo g -d  即可！</p>
<hr>
<p>接下来要忙的就是发布自己的博客 使用任意markdown格式的笔记 小编使用的Typora 感觉蛮好用，再Typora编辑好博客后使用 hexo new (文章命名自定义)     hexo g      hexo d 即可查看新增的博客！！！</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot 之 Schedlued</title>
    <url>/uncategorized/Spring%20boot%20%E4%B9%8B%20Schedlued/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>SpringBoot自带的 Schedule，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多</p>
<p>第一步：可以再自定义的类上添加@EnableScheduling 开启定时任务，也可以再启动器上加上该注解开启</p>
<p>第二步： 在对应的方法上加入@Scheduled  其中有三个属性分别是</p>
<p>1.fixedRate：会为所有任务的开始执行时间编排一个表，假如fixedRate=5000，且第一次开始时间是10:00:00 </p>
<p><code>当执行任务耗时小于fixedRate设置的时间时，将会按照表中的开始时间执行任务，即每隔5秒会执行一个任务</code>： </p>
<p> 当执行任务耗时大于fixedRate设置的时间时，以下一张图就很清楚的表示了 </p>
<p>解析一下：</p>
<p>fixedRate设置的也是为fixedRate=5000</p>
<p>第一个任务开始执行时间是0:00,耗时8秒</p>
<p>第二个任务本应该开始执行时间是0：05，但是第一个任务执行完时间已经是0：08，所以第二个任务在第一个任务执行完毕之后会立即执行，耗时是3s</p>
<p>第三个任务本应该开始执行时间是0：10，但是前两个任务执行完毕时间已经是0：11，所以第三个任务在第二个任务执行完毕之后会立即执行，耗时是6s</p>
<p>第四个任务，也同第二、第三个任务一样，在预计开始执行的时间（这里第四个任务预计开始执行时间是0:15），因为上一个任务还没有执行完毕，所以要等待上一个人执行完毕之后才会执行。</p>
<p>第五个任务预计开始执行时间是0:20，而前四个任务在0:19已经执行完毕，需要等待1秒，到达我们预计的开始执行时间（0:20）才会执行第五个任务。</p>
<p>2.fixedDelay</p>
<p>这个就比之前的fixedRate简单得多。如设置fixedRate=5000.下一个任务只需要盯着上一个任务的屁股（执行完毕的时间）就行了。上一个任务执行完毕5秒之后，下一个任务就会开始执行</p>
<p>3.initialDelay</p>
<p>用于配合fixedRate和fixedDelay使用的，作用是在容器启动后经过多长时间才开始执行第一次任务。</p>
<p>4.cron</p>
<p>在指定的时间执行任务 根据表达式定义的不同 间隔时间不同如：0 0 1 * * ? 表示每天凌晨一点执行一次任务</p>
<p>想了解更多请自行修改。</p>
<p>————————————————<br>版权声明：本文为CSDN博主「小码农liangliping」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33643072/article/details/81334268" target="_blank" rel="noopener">https://blog.csdn.net/qq_33643072/article/details/81334268</a> </p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装docker</title>
    <url>/uncategorized/centos7%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>刚开始了解docker总是听说Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎 让开发者可以打包他们的应用以及依赖包到一    个可移植的镜像中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>或Windows 机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949" target="_blank" rel="noopener">虚拟化</a>容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。 处于对Docker的好奇准备操作一波，由于之前用的虚拟机是centos6版本而看到docker官网上说最低版本需要centos7内核版本3.0.8以上，果断下载centos7安装再次不多说。</p>
<p>开始讲安装docker过程：</p>
<ol>
<li>升级yum源</li>
<li>安装docker所需依赖包  yum update  2. yum install -y yum-utils device-mapper-persistent-data lvm2 </li>
<li>修改docker镜像源 yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a> 发现还是一样的网速慢 使用docker命令提示连接异常</li>
<li>查看docker版本 yum list docker-ce –showduplicates | sort -r </li>
<li>根据需求选择对应docker版本yum install docker-ce-版本号 </li>
<li>启动docker:  systemctl start docker        加入开机启动  systemctl enable docker </li>
</ol>
<p>到此docker已安装完成 测试简单 hello-world命令  先pull镜像 docker pull hello-world  然后报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> docker: Error response from daemon: Get https:&#x2F;&#x2F;registry-1.docker.io&#x2F;v2&#x2F;: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).</span><br><span class="line"></span><br><span class="line">See &#39;docker run --help&#39;.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">百度需要修改docker镜像源 ： docker默认的源为国外官方源，下载速度较慢，可以改为国内，加速 </span><br><span class="line"></span><br><span class="line">方案一： 修改或新增 &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">\# vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方案二：修改或新增 &#x2F;etc&#x2F;sysconfig&#x2F;docker，在OPTIONS变量后追加参数  --registry-mirror&#x3D;&lt;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&gt;</span><br><span class="line"></span><br><span class="line">最终使用方案一解决： vi daemon.json </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;,&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service docker restart 成功！</span><br></pre></td></tr></table></figure>

<p>最后赋上docker常见命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> -----------------     docker ps 查看当前正在运行的容器   -----------------    docker ps -a 查看所有容器的状态</span><br><span class="line">-----------------    docker start&#x2F;stop id&#x2F;name 启动&#x2F;停止某个容器    -----------------    docker attach id 进入某个容器(使用exit退出后容器也跟着停止运行)</span><br><span class="line">-----------------    docker exec -ti id 启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）</span><br><span class="line">-----------------    docker images 查看本地镜像    -----------------    docker rm id&#x2F;name 删除某个容器    -----------------     docker rmi id&#x2F;name 删除某个镜像</span><br><span class="line">-----------------    docker run --name test -ti ubuntu &#x2F;bin&#x2F;bash  复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</span><br><span class="line">-----------------     docker build -t soar&#x2F;centos:7.1 .  通过当前目录下的Dockerfile创建一个名为soar&#x2F;centos:7.1的镜像</span><br><span class="line">-----------------    docker run -d -p 2222:22 --name test soar&#x2F;centos:7.1  以镜像soar&#x2F;centos:7.1创建名为test的容器，并以后台模式运行，并做端口映射到宿主机2222端口，P参数重启容器宿主机端口会发生改变</span><br></pre></td></tr></table></figure>









]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>spring dubbo项目依赖springboot dubbo项目启动失败</title>
    <url>/uncategorized/spring%20dubbo%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96springboot%20dubbo%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h5 id="spring-dubbo项目依赖springboot-dubbo项目启动失败"><a href="#spring-dubbo项目依赖springboot-dubbo项目启动失败" class="headerlink" title="spring dubbo项目依赖springboot dubbo项目启动失败"></a>spring dubbo项目依赖springboot dubbo项目启动失败</h5><p>场景昨天晚上有需求需要在本项目中依赖整合其它系统的dubbo服务  </p>
<p>本项目为spring+dubbo服务 </p>
<p>外部系统springboot+dubbo服务 </p>
<p>在项目中service项目引入外部jar包依赖后项目一直启动报错，首先是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:...&#x2F;repository&#x2F;ch&#x2F;qos&#x2F;logback&#x2F;logback-classic&#x2F;1.1.7&#x2F;logback-classic-1.1.7.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:...&#x2F;repository&#x2F;org&#x2F;slf4j&#x2F;slf4j-log4j12&#x2F;1.7.21&#x2F;slf4j-log4j12-1.7.21.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br></pre></td></tr></table></figure>

<p>由log可以看到因为由多个<code>SLF4J bindings</code>绑定  ,即存在多个SLF4J实现类 ，去掉不需要的jar解决</p>
<p>排除之后没想到又报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [&#x2F;WEB-INF&#x2F;springmvc-servlet.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [&#x2F;NONE]</span><br><span class="line">	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:341)</span><br><span class="line">	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)</span><br><span class="line">	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)</span><br><span class="line">	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)</span><br><span class="line">	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131)</span><br></pre></td></tr></table></figure>

<p>一般情况下是找不到xml文件了 由于本项目service没有web-inf更没有web.xml 所以报错加上之后ok,但是由于测试，生产环境更改可能引起不必要的问题，所以第二种解决方法 排除外部jar包中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring-boot-start</span><br></pre></td></tr></table></figure>

<p>终于完美解决 ，spring-boot-start为什么会引起这个问题待研究</p>
]]></content>
  </entry>
  <entry>
    <title>springboot访问html</title>
    <url>/uncategorized/springboot%E8%AE%BF%E9%97%AEhtml/</url>
    <content><![CDATA[<h3 id="一、什么是Beetl"><a href="#一、什么是Beetl" class="headerlink" title="一、什么是Beetl"></a>一、什么是Beetl</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Beetl是Bee Template Language的缩写，它绝不是简单的另外一种模板引擎，而是新一代的模板引擎，它功能强大，性能良好，超过当前流行的模板引擎。而且还易学易用。</span><br></pre></td></tr></table></figure>

<h4 id="1-2-优缺点"><a href="#1-2-优缺点" class="headerlink" title="1.2 优缺点"></a>1.2 优缺点</h4><p>1.2.1 优点： 易整合、性能强 </p>
<p>1.2.2 缺点： 文档蛋疼、用例少、与html标签结合略显混乱</p>
<h3 id="二、Beetl语法"><a href="#二、Beetl语法" class="headerlink" title="二、Beetl语法"></a>二、Beetl语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考官网语法 (http:&#x2F;&#x2F;ibeetl.com&#x2F;guide&#x2F;#beetl)</span><br><span class="line">在线体验 (http:&#x2F;&#x2F;ibeetl.com&#x2F;beetlonline&#x2F;)</span><br></pre></td></tr></table></figure>

<h3 id="三、第一个例子：与SpringBoot集成"><a href="#三、第一个例子：与SpringBoot集成" class="headerlink" title="三、第一个例子：与SpringBoot集成"></a>三、第一个例子：与SpringBoot集成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;relativePath&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.ibeetl&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;beetl-framework-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.60.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-关于启动器的说明"><a href="#3-3-关于启动器的说明" class="headerlink" title="3.3 关于启动器的说明"></a>3.3 关于启动器的说明</h3><blockquote>
<p>starter 自动处理以btl结尾的视图，模板根目录是Spring Boot默认的templates目录。</p>
</blockquote>
<h3 id="3-4-使用默认配置"><a href="#3-4-使用默认配置" class="headerlink" title="3.4 使用默认配置"></a>3.4 使用默认配置</h3><ul>
<li>创建HelloController(<strong>return “/hello.btl”;</strong>)</li>
<li>在templates下创建 hello.btl</li>
</ul>
<h3 id="3-5-启动运行效果"><a href="#3-5-启动运行效果" class="headerlink" title="3.5 启动运行效果"></a>3.5 启动运行效果</h3><blockquote>
<p><strong>Hello,This is a BTL file, The time is 2018-09-05 10:09:12</strong></p>
</blockquote>
<p>由于springboot 不支持html直接解析显示页面 ，官网上介绍说需要使用模板引擎入Freemark,Thymeleaf …</p>
<p>但是感觉限制太大需要学习相关的语法然后发现beetl模板，速度比以上两款速度快废话不多说贴代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Beetl配置</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class BeetlExtConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;beetlConfig&quot;)</span><br><span class="line">    public BeetlGroupUtilConfiguration getBeetlGroupUtilConfiguration() &#123;</span><br><span class="line">        BeetlGroupUtilConfiguration beetlGroupUtilConfiguration &#x3D; new BeetlGroupUtilConfiguration();</span><br><span class="line">        beetlGroupUtilConfiguration.setResourceLoader(new ClasspathResourceLoader(&quot;pages&#x2F;&quot;));</span><br><span class="line">        beetlGroupUtilConfiguration.init();</span><br><span class="line">        GroupTemplate groupTemplate &#x3D; beetlGroupUtilConfiguration.getGroupTemplate();</span><br><span class="line">        &#x2F;&#x2F; 读取配置文件信息</span><br><span class="line">        return beetlGroupUtilConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;beetlViewResolver&quot;)</span><br><span class="line">    public BeetlSpringViewResolver getBeetlSpringViewResolver(@Qualifier(&quot;beetlConfig&quot;) BeetlGroupUtilConfiguration</span><br><span class="line">                                                                      beetlGroupUtilConfiguration) &#123;</span><br><span class="line">        BeetlSpringViewResolver beetlSpringViewResolver &#x3D; new BeetlSpringViewResolver();</span><br><span class="line">        beetlSpringViewResolver.setSuffix(&quot;.html&quot;);</span><br><span class="line">        beetlSpringViewResolver.setOrder(0);</span><br><span class="line">        beetlSpringViewResolver.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">        beetlSpringViewResolver.setConfig(beetlGroupUtilConfiguration);</span><br><span class="line">        return beetlSpringViewResolver;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>yml配置 并不需要配置 prefix,  Suffix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvc:</span><br><span class="line">    static-path-pattern: &#x2F;static&#x2F;**</span><br></pre></td></tr></table></figure>

<p>启动tomcat运行成功显示html页面</p>
<p>网上看到第二种方式也可以测试ok  在resources下方添加beetl.properties文件添加如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RESOURCE.root&#x3D;&#x2F;pages&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResourcePatternResolver resolver &#x3D; new PathMatchingResourcePatternResolver();</span><br><span class="line">beetlGroupUtilConfiguration.setConfigFileResource(resolver.getResource(&quot;classpath:beetl.properties&quot;));</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>beetl</tag>
      </tags>
  </entry>
  <entry>
    <title>spring依赖springboot项目异常</title>
    <url>/uncategorized/spring%E4%BE%9D%E8%B5%96springboot%E9%A1%B9%E7%9B%AE%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>场景昨天晚上有需求需要在本项目中依赖整合其它系统的dubbo服务  </p>
<p>本项目为spring+dubbo服务 </p>
<p>外部系统springboot+dubbo服务 </p>
<p>在项目中service项目引入外部jar包依赖后项目一直启动报错，首先是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:...&#x2F;repository&#x2F;ch&#x2F;qos&#x2F;logback&#x2F;logback-classic&#x2F;1.1.7&#x2F;logback-classic-1.1.7.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:...&#x2F;repository&#x2F;org&#x2F;slf4j&#x2F;slf4j-log4j12&#x2F;1.7.21&#x2F;slf4j-log4j12-1.7.21.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br></pre></td></tr></table></figure>

<p>由log可以看到因为由多个<code>SLF4J bindings</code>绑定  ,即存在多个SLF4J实现类 ，去掉不需要的jar解决</p>
<p>排除之后没想到又报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [&#x2F;WEB-INF&#x2F;springmvc-servlet.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [&#x2F;NONE]</span><br><span class="line">	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:341)</span><br><span class="line">	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)</span><br><span class="line">	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)</span><br><span class="line">	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)</span><br><span class="line">	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131)</span><br></pre></td></tr></table></figure>

<p>一般情况下是找不到xml文件了 由于本项目service没有web-inf更没有web.xml 所以报错加上之后ok,但是由于测试，生产环境更改可能引起不必要的问题，所以第二种解决方法 排除外部jar包中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring-boot-start</span><br></pre></td></tr></table></figure>

<p>终于完美解决 ，spring-boot-start为什么会引起这个问题待研究</p>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>项目并发问题</title>
    <url>/uncategorized/%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="项目并发问题"><a href="#项目并发问题" class="headerlink" title="项目并发问题"></a>项目并发问题</h2><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>最近在做一款支付项目，相应的并发比较搞且要求数据一致性比较强，但是测试并发时，一直存在并发问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void demo(String status, String orderNo) &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">         if (&quot;SUCCESS&quot;.equals(status)) &#123;</span><br><span class="line">             updatePayStatus(orderNo);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; finally &#123;</span><br><span class="line">         notifyPay(0L);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void updatePayStatus(String orderNo) &#123;</span><br><span class="line">     &#x2F;&#x2F;do something</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void notifyPay(Long id) &#123;</span><br><span class="line">     &#x2F;&#x2F;do something</span><br><span class="line">     TUser user &#x3D; userRepository.findOne(id);</span><br><span class="line">     String callbackNumber &#x3D; user.getCallbackNumber() + 1;</span><br><span class="line">     update(user, &quot;1&quot;, callbackNumber);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void update(TUser user, String callbackStatus, String callbackNumer) &#123;</span><br><span class="line">     user.setCallbackStatus(callbackStatus);</span><br><span class="line">     user.setCallbackNumber(callbackNumer);</span><br><span class="line">     userRepository.save(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>大概代码逻辑处理如上： 如果支付成功，（1）修改支付状态 并最后通知上有平台系统，（2）<strong>并修改回调状态</strong> 重点来了。</p>
<p>由于并发时在某一瞬间，（2）处先查询到了旧的数据此时（1）还未作修改在（1）修改完成之后此时（2）处开始执行修改逻辑，结果就悲剧了导致充值笔数一直对不上，排查问题时notify是异步定时任务所以并没有太注意，一直在看其它处修改逻辑怀疑是没有加事务导致，就将其它几处修改订单表的逻辑合并为一块处理，然而并没有解决问题，最后在同事的帮忙下找到问题（还是自己太菜），更诡异的是笔数问题解决后，查看后台日志时一直在打印某张表的数据修改时产生死锁，这还得了赶紧又一轮排插，发现充值部分有两处代码更新数据时where条件同为订单ID（二级索引列），度娘后得知InnDB，因此首先锁住二级索引（两行），接着会锁住相应主键所对应的记录；</p>
<h4 id="死锁成因"><a href="#死锁成因" class="headerlink" title="死锁成因"></a>死锁成因</h4><p>​     了解了innodb锁的基本原理后，下面分析下死锁的成因。如前面所说，死锁一般是事务相互等待对方资源，最后形成环路造成的。下面简单讲下造成相互等待最后形成环路的例子。 </p>
<p>1,不同表相同记录行锁冲突2,相同表记录行锁冲突3,不同索引锁冲突 4, gap锁冲突</p>
<h4 id="如何尽可能避免死锁"><a href="#如何尽可能避免死锁" class="headerlink" title="如何尽可能避免死锁"></a>如何尽可能避免死锁</h4><p>1）以固定的顺序访问表和行。比如对第2节两个job批量更新的情形，简单方法是对id列表先排序，后执行，这样就避免了交叉等待锁的情形；又比如对于3.1节的情形，将两个事务的sql顺序调整为一致，也能避免死锁。</p>
<p>2）大事务拆小。大事务更倾向于死锁，如果业务允许，将大事务拆小。</p>
<p>3）在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁概率。</p>
<p>4）降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</p>
<p>5）为表添加合理的索引。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</p>
<p>在此记录一下。</p>
]]></content>
  </entry>
  <entry>
    <title>理解JVM垃圾回收器</title>
    <url>/uncategorized/%E7%90%86%E8%A7%A3JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="理解JVM垃圾回收器"><a href="#理解JVM垃圾回收器" class="headerlink" title="理解JVM垃圾回收器"></a>理解JVM垃圾回收器</h1><p>日常</p>
<p>60分钟前</p>
<p>150阅读26点赞2评论</p>
<p><strong>(编写不易，全文手打，希望多多转发支持，你们的支持是我前进的动力<del>~</del>经过本人多次阅读，应该没有多大问题。转载请说明出处。)</strong></p>
<p>垃圾回收器(GC)是Java平台上应用程序行为不可分割的一部分，但它经常被程序员误操作而导致程序性能下降或者没有达到想要的效果。因此，Java开发人员需要了解GC是如何工作的，这样就可以根据应用程序的特性来选择和调优垃圾回收器，并以此来保证程序的运行时性能、可伸缩性和可靠性。</p>
<p>本文回顾并分类了目前JVM中使用的各种垃圾回收器和回收技术，并概述了常见的垃圾回收技术和算法，定义所有回收器通用的术语和度量标准，包括:</p>
<ol>
<li>Generational  分代</li>
<li>Parallel  并行</li>
<li>Stop-the-world 全局停止</li>
<li>Incremental 增量</li>
<li>Concurrent 并发</li>
<li>Mostly-concurrent 部分并发</li>
</ol>
<p>本文对JVM主要使用的回收器机制和特征进行了分类，并讨论了在不同场景下如何平衡响应性（延迟）、吞吐量、内存，也总结了一些关于垃圾回收行为的陷阱、常见的误解和被人们口口相传却缺乏依据的“神话”操作，以及因为某些奇葩的选择如何导致令人印象深刻的应用程序的诡异行为示例。</p>
<h1 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a>什么是垃圾回收</h1><p>Java编程语言利用托管运行时(Java虚拟机，也称JVM)来提高开发人员的生产力并提供跨平台可移植性。在不同的操作系统和硬件平台上，他们的管理内存的方式是不同的，于是JVM为开发人员提供了这样一个功能：在创建对象时自动分配内存，不再使用对象时自动释放内存。这个释放未使用对象内存的过程称为“垃圾回收”(GC)，由JVM在应用程序执行期间在内存堆上执行。</p>
<p>JVM垃圾回收对应用程序性能和吞吐量有很大的影响。随着JVM堆内存大小的增加，应用线程必须暂停以允许JVM进行垃圾回收，这样就会导致应用程序停顿等待GC的时间也不断增加，其结果就是导致程序长时间的暂停，这可能会延迟事务、降低应用程序吞吐量，从而导致用户会话超时、迫使节点退出集群，或导致更严重的业务损失(例如收入下降或声誉受损)等等不利因素。</p>
<p>本文详细地讲解了垃圾回收器的工作原理，以及商业上使用的JVM所使用的不同算法，以及开发人员和架构师如何选择哪个垃圾回收器以使应用程序的性能最大化。</p>
<h1 id="为什么你要学习垃圾回收器"><a href="#为什么你要学习垃圾回收器" class="headerlink" title="为什么你要学习垃圾回收器"></a>为什么你要学习垃圾回收器</h1><p>整体上来说，垃圾回收器比你想象的要可靠好用得多，效率也更高。在分配内存方面，它比malloc()快得多，而且回收垃圾对象不需要任何成本(这是真的，因为如果能随时都知道哪个对象是垃圾，那就相当简单对吧)。GC将在没有任何开发人员帮助的情况下找到所有垃圾对象，甚至循环引用的对象也是如此。但在许多方面，垃圾回收器比许多开发人员和架构师所了解到的要诡异得多。</p>
<p>对于大多数回收器来说，GC暂停时间与堆大小成正比，约为每回收1GB堆大小活动对象需要增加大约1秒。因此，越大的堆(这对于大多数应用程序来说是常见的)意味着更长的暂停时间。更糟糕的是，如果你运行了一个20分钟的测试，并调整到所有GC暂停都消失了，那么很可能你只是将暂停移到了21分钟后（气不气）。因此不幸的是，暂停仍然会发生，而你的应用程序将继续受到影响。此外，垃圾回收器的存在并不能消除内存泄漏——开发人员仍然需要找到并修复。</p>
<p>好消息是Java确实提供了某种程度的GC的控制。开发人员和架构师可以通过调整GC参数来控制垃圾回收器的行为，从而调整应用程序性能。例如，在c++中，每一个null值都是有意义的，当不再需要使用对象时，在析构函数中释放内存然后赋值为null。然而，在Java程序中，如果到处都使用finalize方式来释放内存的方式编码，这比什么都不写要糟糕得多，如果每个类都使用finalize方法来释放不需要使用的引用，垃圾回收器可能必须在每个GC周期执行数百万个对象的finalize方法，最终导致垃圾回收暂停时间变得过长。这就意味着：试图通过应用程序编程来解决垃圾回收是危险的。这需要大量的实践和理解才能做到，这些时间本可以更好地用于创造更多有价值的功能。而且，即使你做出了所有正确的决策，应用程序使用的其他代码也可能不会得到优化，或者应用程序的工作负载可能会随着时间的推移而改变，你的应用程序仍然会包含与GC相关的性能问题。此外，由于不顾应用程序的特性，去选择了错误的垃圾回收器或者使用了错误的配置，可能会大大增加暂停时间，甚至导致内存不足的崩溃。正确理解垃圾回收和可用选项后，可以使你做出更明智的决策，从而提高应用程序运行时性能和可靠性。</p>
<h1 id="垃圾回收器的种类"><a href="#垃圾回收器的种类" class="headerlink" title="垃圾回收器的种类"></a>垃圾回收器的种类</h1><p>垃圾回收器分为几种类型。对于每种类型，有些回收器又可以被分类为“mostly”（STW的GC）[作者：黄俊，B站地址：<a href="https://space.bilibili.com/232459430" target="_blank" rel="noopener">https://space.bilibili.com/232459430</a>]，也叫“mostly   concurrent”（部分STW，部分和应用程序一起执行），也即部分并发GC，比如CMS回收器。这意味着，有时它并不是根据这样的类型来执行操作的，当某些情况发生时，它需要有一个后备机制，比如CMS之后的Serial   GC兜底（想象一下应用程序分配内存的速度大于垃圾回收速度会怎样）。因此，部分并发的回收器可以与应用程序执行并发操作，并且只在偶尔需要时停止。分类如下：</p>
<ol>
<li>Concurrent Collector(并发回收器)——当应用程序执行时，并发地执行垃圾回收。</li>
<li>Parallel Collector(并行回收器)——使用多个线程并行回收</li>
<li>Stop-the-world (STW)——在应用程序完全停止时执行垃圾回收</li>
<li>Incremental(增量) ——将垃圾回收切割为一系列的增量执行，其中可能有很长的间隔。应用程序在垃圾回收期间根据需要暂停，在两次增量之间运行，这也可以称之为夹缝中生存</li>
<li>Moving(对象转移) ——回收器在垃圾回收期间移动活动对象，并且必须更新对这些活动对象的引用</li>
<li>Conservative(保守GC) ——大多数非托管运行时都是保守GC的。在这种模型中，回收器不能确定某个字段是否是引用，所以它假设它是引用。这与精准式回收器相反</li>
<li>Precise(精准GC) ——精准回收器准确地知道每个可能的对象引用的位置。因为如果不精准，回收器就不能成为进行对象转移，因为你必须知道在移动活动对象时要更新哪些引用。精准回收器识别内存堆中的活动对象，回收死对象持有的资源，并定期重定位活动对象的位置。</li>
</ol>
<p>准确地说，虚拟机所做的大部分工作实际上都在编译器中，而不是回收器本身。今天所有的商业jvm都是可对象转移且精准的。</p>
<h1 id="垃圾回收的步骤"><a href="#垃圾回收的步骤" class="headerlink" title="垃圾回收的步骤"></a>垃圾回收的步骤</h1><p>在垃圾回收器回收内存之前，它必须确保应用程序处于“GC安全点”。GC安全点是线程执行中的一个点或一片区域，在这个点上回收器可以识别线程执行堆栈中的所有引用，此时应用线程不应该再修改这些信息。术语“安全点”和“GC安全点”通常可以互换使用。存在许多类型的安全点，其中一些需要比GC安全点更多的信息，“全局安全点”是指所有的应用程序线程都处于一个安全点上。代码中的安全点检测应该经常出现。如果垃圾回收器必须等待几分钟(或更长)以外的安全点，那么应用程序可能会在垃圾回收之前耗尽内存并崩溃。到达GC安全点后，就可以开始垃圾回收了。</p>
<h1 id="Mark-Phase（标记阶段）"><a href="#Mark-Phase（标记阶段）" class="headerlink" title="Mark Phase（标记阶段）"></a>Mark Phase（标记阶段）</h1><p>此阶段也称为“跟踪”，直到堆中的所有活动对象。这个过程从“GC  ROOT”开始，包括线程栈、静态变量、来自JNI代码的特殊引用和其他可能找到活动对象的区域（比如年轻代收集时，老年代就可以作为GC  ROOT）。如果对象在GC  ROOT引用链上，那么对象就不会被回收器回收。垃圾回收器将它能到达的任何对象标记为活动对象。在这一步结束时留下的任何对象都是“垃圾对象”。如果开发人员认为任何对象已经失效，但仍然可以访问，那就是对象泄漏（内存泄漏的一种形式）。标记的工作时间与活动对象和引用的数量是线性的，与对象的大小无关。换句话说，标记器标记1000个10KB对象所花费的时间与标记1000个1MB的对象所用的时间相同。</p>
<p>在并发标记过程中，所有可到达的对象都被标记为活动的，但是如果对象在标记工作时发生变化，这可能会导致标记错误，比如：应用线程可以将一个对象引用到一个已经访问过的对象中，但是这个对象已经被标记过了，这时引用的这个对象也会被当做垃圾回收，导致错误，也即漏标。如果不以某种方式截获或阻止此更改，则可能导致应用程序发生异常：对象将被回收，即使对它的引用仍然存在。</p>
<p>通常使用“写屏障”来防止这种情况。  { 作者：黄俊，B站地址：<a href="https://space.bilibili.com/232459430" target="_blank" rel="noopener">https://space.bilibili.com/232459430</a>  }   写障碍拦截对象引用的修改(例如记录在卡表中)，有了这些信息，标记器就可以重新标记所有由于应用线程修改的引用的对象，当这些修改信息较小时，可以使用STW暂停应用线程，来完成这些重标记工作，通过这种方式就可以使回收器与应用程序部分并发执行。但需要注意的是，回收器对应用线程的更改堆的操作很敏感，完成的回收时间会随着应用程序所更改的信息增加而增加，最后可能导致无法完成GC工作然后发生Full  GC。</p>
<h1 id="Sweep-Phase（清除阶段）"><a href="#Sweep-Phase（清除阶段）" class="headerlink" title="Sweep Phase（清除阶段）"></a>Sweep Phase（清除阶段）</h1><p>在这个阶段，垃圾回收器扫描堆以识别“死亡”对象的位置，通常以空闲列表的方式并回收这些对象。与标记阶段不同，清除阶段所做的工作与堆的大小是线性的，而不是与活动对象的大小相关，扫描仍然需要扫描整个堆。</p>
<h1 id="Compact-Phase（压缩阶段）"><a href="#Compact-Phase（压缩阶段）" class="headerlink" title="Compact Phase（压缩阶段）"></a>Compact Phase（压缩阶段）</h1><p>随着时间的推移，Java内存堆变得“碎片化”，对象之间的碎片空间不足以存放新对象，这使得新对象分配更慢甚至失败。如果你的应用程序创建的对象大小不一致，那么碎片化的速度会更快。XML就是一个很好的例子。格式是定义了的，但对象中信息的大小是不受控制的，这通常会导致对象大小变化很大，并且会产生碎片化的堆。</p>
<p>在压缩阶段，垃圾回收器重定位所有的活动对象以获取连续的空间。当这些对象被移动时，回收器必须修复线程中对这些活动对象的所有引用，称为“重映射”。重映射必须覆盖所有指向对象的引用，所以它通常会扫描所有对象。这一阶段所做的工作量通常与活动对象的数量成线性关系。</p>
<p>增量压缩在几个商业回收器(Oracle  G1和IBM  Balance)得以实现。这种技术总是假设某些内存区域比其他区域热点更高，但因为应用程序的不同，情况并非总是如此。GC算法通过记忆集来跟踪跨区域的对象引用(即哪个区域指向哪个区域)。这允许回收器一次压缩单个区域，并且在重映射更新引用时，只扫描指向该区域的区域。这样回收器就可以识别满足设定的有限暂停时间的区域集（G1中这称之为Collected  Set），从而允许控制应用程序暂停的最大时间。指向单个区域的对象数量往往与堆的大小成线性关系，因此压缩的工作量会随着堆大小的增加而增加。</p>
<h1 id="垃圾回收器的分类"><a href="#垃圾回收器的分类" class="headerlink" title="垃圾回收器的分类"></a>垃圾回收器的分类</h1><ol>
<li>Mark/Sweep/Compact Collector——将这三个阶段作为三个独立的步骤执行</li>
<li>Mark/Compact Collector——跳过清除阶段，直接将活动对象移动到堆的连续区域</li>
<li>Copying Collector——在一次GC工作中执行所有三个阶段。它使用from和to空间，移动所有活动对象，然后一次性更新所有引用。当from区域为空时，表示回收已完成。复制回收器中所做的工作时间与活动对象的大小和数量成线性关系。</li>
</ol>
<p>Mark/Sweep/CompactMark/CompactCopying执行回收所需的内存活动对象的大小再稍微加一点活动对象大小的2倍活动对象大小的2倍对整个堆进行垃圾回收NONO通常为YES回收时间堆的大小活动对象的大小活动对象的大小需要大量的“空闲”内存NOYESYES适用场景几乎没有空闲内存的堆在M/S/C阶段中产生了大量碎片的堆活动对象较少的堆支持碎片化的堆YESYESNO</p>
<h1 id="分代回收器"><a href="#分代回收器" class="headerlink" title="分代回收器"></a>分代回收器</h1><p>分代回收器基于大多数对象朝生夕死的假设，也即应用程序创建了它们，但很快就不再需要它们了。通常，一个方法会创建许多对象，但不会将它们存储在字段中。当方法退出时，这些对象就准备好被垃圾回收了。开发者可以设置一个“分代过滤器”，以减少分配给老年代的对象比例，比如使用对象年龄。这个过滤器目前是提高应用程序吞吐量的唯一方法，因为应用程序创建对象的速度要比垃圾回收它们的速度快得多。对于适用于这种假设的应用程序，将垃圾回收工作集中在年轻代上是有意义的，并将寿命足够长的对象提升到“老年代”，因为后者在被回收时可以被垃圾回收得更少。这些年轻代对象很快就会死亡，所以年轻代中的活动对象只占可用空间的一小部分，因此重定位活动对象的回收器是有意义的，因为我们有空间放置活动对象，并且所消耗的时间与活动对象的大小是线性相关的，而又因为活动对象很少，那么耗费的时间也很少。分代回收器通常不需要活动对象集两倍的内存，因为对象可能会晋升到老年代空间。这弥补了复制回收器的主要缺点，因此年轻代可以在回收前完全被填满。</p>
<p>决定何时提升对象是极大影响提高回收效率的因素。在年轻代中保存对象的时间长一点可能会让更多对象死亡，从而节省回收时间。如果你把它们保留得太久，年轻代就会失去空间，或者完全破坏朝生夕死的假设，但是等待提升时间过长又会显著增加复制活动对象所需的工作，从而增加执行GC所需的时间，所以在调优时需要灵活考虑这个因素。</p>
<h1 id="Remembered-Set（记忆集）"><a href="#Remembered-Set（记忆集）" class="headerlink" title="Remembered  Set（记忆集）"></a>Remembered  Set（记忆集）</h1><p>分代回收器使用“记忆集”从外部跟踪对年轻代的所有引用，因此回收器不必全部扫描这些外部引用了年轻代的区域，只需要扫描RSet的区域即可，当然RSet必然也用作垃圾回收器的“GC   ROOT”的一部分，一种常见的技术是“卡表标记”，它使用一个位(或字节)来表明老年代中的一个字或一个区域有对象指向年轻代的引用。这些“标记”可以精确也可以不精确，这意味着它可能记录下确切的位置，或者只是其中的一个区域。写障碍用于跟踪从年老代到年轻代的引用，并使记忆的集合保持最新。Oracle的HotSpot使用了所谓的“blind  store”，每次你存储一个引用，它就会标记一张卡片为脏，这工作得很好，因为检查引用需要更多的CPU时间，所以系统通过标记卡片节省时间。</p>
<h1 id="商业版实现"><a href="#商业版实现" class="headerlink" title="商业版实现"></a>商业版实现</h1><p>商业服务器JVM通常为年轻代使用一个复制回收器，它使用一个整体的、STW的回收。换句话说，回收器停止应用程序处理，并将整个活动对象复制到堆的新部分。老年代通常使用Mark/Sweep/Compact回收器，它可以是STW、并发、部分并发。</p>
<h1 id="开发人员和架构师可以做什么"><a href="#开发人员和架构师可以做什么" class="headerlink" title="开发人员和架构师可以做什么"></a>开发人员和架构师可以做什么</h1><p>首先，理解应用程序的特征和垃圾回收工作原理的基本知识。</p>
<h1 id="垃圾回收度量标准"><a href="#垃圾回收度量标准" class="headerlink" title="垃圾回收度量标准"></a>垃圾回收度量标准</h1><p>应用程序的许多特性将直接影响运行时的垃圾回收和应用程序的性能，首先我们先了解一下，有哪些指标。首先是了解应用程序在内存中分配对象的速度，也称为对象分配率。你曾经遇到过一个对象完全朝生夕死的应用程序吗？或者你曾经遇到过很多对象需要一直存活的应用程序吗?当然没有这样的程序，所以我们需要分而治之，每一代采取不同的算法。你的程序也可以在内存中更新对象的引用，那么更新的这些引用的速度称为更改率，更改率一般与应用程序所做的工作量成正比。最后，随着对象的创建和消亡，那么就存在一张存活对象图，也即从GC  ROOT一直能跟踪到的对象，他们组成一张对象图，这些对象也称之为堆对象存活率，而这些对象所占有的空间也形成了堆的形状：比如规整或者碎片堆。</p>
<p>标记时间和压缩时间是决定总体垃圾回收时间的最重要的指标。标记时间是回收器在堆上找到所有活动对象所需的时间，压缩时间是指重定位对象并释放他们占用的内存所需的时间，当然这只针对于Mark/Compact的回收器。对于Mark/Sweep/Compact回收器来说，Sweep所消耗的时间也很重要，它表明回收器定位所有死对象所花的时间，回收器完成一次垃圾回收的时间指的是：从开始垃圾回收，直到释放内存并获得可用内存的总时间。</p>
<h1 id="GC时所需要的的空闲内存"><a href="#GC时所需要的的空闲内存" class="headerlink" title="GC时所需要的的空闲内存"></a>GC时所需要的的空闲内存</h1><p>垃圾回收器需要一定数量的空内存才能工作，充足的空闲内存能使垃圾回收器更容易(和更快)地执行任务，将空闲内存加倍，那么回收器完成的工作将减半，且运行所需的CPU消耗也减半，这通常是提高性能的最简单有效的方法。当然，这里有几个非常直观的悖论：如果我们有无限的空闲内存，我们就永远不需要回收，GC也永远不会消耗任何CPU时间，如果我们在任何时候都恰好有1个字节的空闲内存，回收器将不得不一直不间断的工作去取得空闲内存，GC将占用100%的CPU全部时间。所以，总的来说，在这两个限制之间，垃圾回收CPU时间大致遵循1/x的曲线，随着空闲内存的增加，GC的压力也相应的减少。</p>
<p>Mark/Compact和Copy回收器的回收时间与活动对象的大小线性相关。每一次垃圾回收需要多久，取决于空闲内存的数量。因为每次回收的回收的对象数量几乎是固定的，所以减少回收的次数会更有效率。注意：在这两种类型的回收器中，可用的空闲内存的大小并不控制垃圾回收暂停的时间，而只控制垃圾回收的频率。而对于Mark/Sweep/Compact而言，它的回收时间随着堆的大小增长而增长。所以，对于需要STW暂停工作线程去扫描的回收器来说，更多的空内存意味着更少的回收频率，但却需要更长的暂停时间。</p>
<p>所以如果我们充分了解了应用程序的特性，那么我们就可以进行改进应用程序的性能、可伸缩性和可靠性。</p>
<h1 id="GC策略：推迟不可避免的事情"><a href="#GC策略：推迟不可避免的事情" class="headerlink" title="GC策略：推迟不可避免的事情"></a>GC策略：推迟不可避免的事情</h1><p>虽然压缩在实际场景下是不可避免的，但许多GC调优技术关注点是尽可能延迟需要长时间STW的完全压缩的时机，并尽可能快地释放容易回收的内存域，比如存活对象较少的区域。分代的垃圾回收器可以部分延迟不可避免的事情，因为它可以经常回收年轻代对象，这不会花费太多时间，但随着时间的推移，老年代的空间必须通过一个全局STW的压缩来回收利用空闲内存。另一种延迟策略是执行并发标记和扫描、清理，但跳过压缩阶段，释放的内存可以在空闲列表中跟踪并重用，而不需要移动活动对象。但随着时间的推移，这将导致碎片化，最后导致压缩。</p>
<p>最后，一些回收器依赖于将堆分割为不同的区域，根据设定的停顿时间动态调整区域的大小，部分区域采取部分压缩的策略来减少内存碎片，由于压缩区域的减少从而也减少了垃圾回收时间。然后随着时间推移，如果大量对象均未释放或者应用线程分配对象的速率超过增量GC回收内存的速度，最终也会来一次全局STW来压缩内存。</p>
<p>最终结论是：因为有通过许多技术和创新的方法去减少垃圾回收的暂停时间，所以大多数商业垃圾回收器之间的竞争是不可避免的，这就要求开发人员和架构师在需要时做出正确的决策，决定使用哪种回收器来最大化应用程序性能。</p>
<h1 id="选择垃圾回收器"><a href="#选择垃圾回收器" class="headerlink" title="选择垃圾回收器"></a>选择垃圾回收器</h1><p>下表总结了一些流行的商业垃圾回收器</p>
<p><img src="https://i0.hdslb.com/bfs/article/c9e4a904521df155186df7a8717c38cbe0db68cc.png@1320w_664h.png" alt="img">流行的商业垃圾回收器</p>
<p>这是HotSpot的默认回收器。它的年轻代使用了一个全局的、STW的复制回收器和一个全局的、STW的老年代的Mark/Sweep/Compact回收器。</p>
<h1 id="Oracle’s-HotSpot-CMS"><a href="#Oracle’s-HotSpot-CMS" class="headerlink" title="Oracle’s HotSpot CMS"></a>Oracle’s HotSpot CMS</h1><p>并发标记/Sweep回收器(CMS)是 HotSpot 中的一个选项。它试图通过在不压缩的情况下，标记和清除老年代来尽可能地减少老年代的暂停时间，一旦老年代产生了太多碎片，他们就会退回到使用一个全局的、STW的压缩算法。</p>
<p>CMS主要执行并发标记。它在应用程序运行时同时进行标记，并同时跟踪引用线程对于已标记过的对象引用的更改。CMS还执行并发清理，这将释放垃圾对象所占用的空间，并创建一个用于分配新对象的空闲列表，当对象不能从年轻代晋升到老年代或并发标记失败时，系统将抛出promotion  failure消息，然后执行压缩算法，这可能导致应用暂停一秒或更长时间。</p>
<p>年轻代使用一个全局的、STW的复制回收器，就像ParallelGC一样。</p>
<h1 id="Oracle’s-HotSpot-G1GC-Garbage-First"><a href="#Oracle’s-HotSpot-G1GC-Garbage-First" class="headerlink" title="Oracle’s HotSpot G1GC (Garbage First)"></a>Oracle’s HotSpot G1GC (Garbage First)</h1><p>G1是HotSpot中的一个选项。它的目标是避免或者说尽可能减少Full   GC的发生。G1的老年代使用了一个“大部分”并发标记的算法，它尽可能多地与应用线程并发完成标记工作，然后使用一个短暂的STW来处理应用线程对象引用更改的处理。G1在RSet中保存区域间的引用关系，而不是使用细粒度的对象列表，它尽可能地对访问频率较多的对象和区域使用STW、增量压缩和延迟压缩。当需要的时候，G1又回到了全局的、STW的完全压缩算法。</p>
<p>它的年轻代使用一个全局的、STW的复制回收器，就像ParallelGC和CMS一样。</p>
<p>Azul Systems Zing C4</p>
<p>C4(连续并发压缩回收器)是Azul系统的默认的垃圾回收器。C4同时适用于年轻代和年老代。与其他算法不同的是，它不是“大部分”并发的，而是完全并发的，因此它永远不会退回到STW压缩算法。C4使用Load  Value Barrier  (LVB)读取对象时验证每个堆引用是否正确，任何指向重定位对象的堆引用的访问操作都会被捕获，并让这个线程在这个屏障中进行自我修复，也即对象的重定位。C4有单独的并发标记线程，无论你的应用程序改变堆的速度有多快，C4都能跟上。C4回收器还并发执行引用处理(包括弱引用、软引用和final引用)，对象的重定位和重映射都是并发执行的。C4还使用“快速释放”的方式，使已释放的内存能够快速地用于应用程序和对象的重新定位，这就支持不需要空闲内存就能运行的“手动”压缩。</p>
<p><img src="https://i0.hdslb.com/bfs/article/d285030254cf1672c3a9a37b412a648a657f1a5b.png@1320w_698h.png" alt="img">不同垃圾回收器吞吐量</p>
<p><img src="https://i0.hdslb.com/bfs/article/c7b398076ace1bf25dc369190fa2e374d0393819.png@1320w_704h.png" alt="img">不同垃圾回收器响应时间</p>
<h1 id="GC调优的观察"><a href="#GC调优的观察" class="headerlink" title="GC调优的观察"></a>GC调优的观察</h1><p>大多数回收器的垃圾回收调优都很难做到一定正确，即使你理解了应用程序的特性。下图显示了HotSpot   JVM中CMS回收器的两组调优参数。虽然它们可能使用相似的参数，但它们是非常不同的，甚至在某些领域是完全相反的。然而，应用程序的性能可以通过任意一种设置进行优化，这取决于其特定的特性。对于大多数垃圾回收器来说，没有“一刀切”的答案存在。开发人员和架构师必须仔细调优，并在每次应用程序、环境或预期的负载变化时重新调优。错误地获取这些参数可能会在峰值负载时间导致意外的长时间暂停。然而，Azul  Zing C4上运行的应用程序性能“通常”对调整参数不敏感，因为它在年轻代和年老代中都是并行标记和压缩的，所以唯一重要的参数是堆大小。</p>
<p>当你在Zing运行时中设置堆大小时，C4回收器自动计算它需要的GC时间，以跟上分配率，不需要设置GC期望时间，Zing的C4   GC将在需要时使用与应用程序线程分离的线程工作，与其他GC策略相比，这允许将最坏情况下的暂停时间降低几个数量级。随着GC的退出，到线程安全点的时间将成为下一个主要的延迟来源，当然我们可以使用其他方式来实现更低的延迟，通常通过操作系统或者通过JIT编译器在JVM中调整。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>垃圾回收(GC)是Java平台上应用程序行为不可分割的一部分，但它经常被误解。Java开发人员可以通过理解GC的工作方式和做出更好的垃圾回收器选择来提高应用程序的性能、可伸缩性和可靠性。大多数垃圾回收器的主要缺点是需要长时间的应用程序暂停，这些暂停是不可避免地，因为我们需要压缩堆以释放垃圾对象占用的空间。回收器使用不同的策略来延迟这些需要长时间STW的操作，但是压缩对于所有商业可用的回收器都是不可避免的，除了Azul   C4，它使用连续并发压缩回收器，避免了所有的暂停。当然，我们目前已经有了堪比C4的ZGC，最终我们的JVM会变成不需要我们进行GC调优，一切交给垃圾回收器即可。</p>
<p><strong>看了如果有收获，多多转载支持哟。本人微信联系方式：bx_java   欢迎前来探讨。</strong></p>
<p>最后配上一个神图：</p>
<p><img src="https://i0.hdslb.com/bfs/article/369d07038a77a216ee9ba95ce2eba28532a1fbe3.png@1320w_2028h.png" alt="img"></p>
]]></content>
  </entry>
</search>
